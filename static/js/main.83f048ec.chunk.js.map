{"version":3,"sources":["fonts/RetroGaming.ttf","fonts/RetroGaming.woff","fonts/RetroGaming.woff2","globalStyle.tsx","components/TitleHeader.tsx","components/TitleInput.tsx","components/TitleButton.tsx","pages/StartScreen.tsx","components/Car.tsx","components/CenteredText.tsx","components/Overlay.tsx","components/Obstacle.tsx","helpers/useTimer.ts","pages/GameScreen.tsx","helpers/preloadAssets.ts","App.tsx","index.tsx","assets/background.gif","assets/background-paused.png","assets/car.png","assets/obstacle.png"],"names":["module","exports","GlobalStyle","createGlobalStyle","RetroGamingTtf","RetroGamingWoff","RetroGamingWoff2","Title","styled","h4","TitleHeader","text","Input","input","TitleInput","setValue","onKeyDown","data-testid","onChange","event","target","value","Button","button","props","isVisible","TitleButton","label","onClick","disabled","Position","Container","div","ErrorText","h1","StartScreen","name","setName","handleStart","errorMsg","key","length","undefined","StyledCar","img","car","x","Car","position","Left","Middle","Right","CenteredText","Background","StaticCenteredText","Overlay","children","StyledObstacle","obstacle","initialX","keyframes","finalX","time","isPaused","Obstacle","useTimer","useState","setTime","paused","setPaused","useEffect","interval","setInterval","prev","clearInterval","pause","resume","reset","frozenBackground","pausedBackground","background","TapAreaWrapper","TapAreaRecognizer","PauseButton","getRandomPosition","Math","floor","random","GameScreen","currentPosition","setCurrentPosition","countdownValue","setCountdownValue","hasCrashed","setCrashed","currentObstaclePosition","setCurrentObstaclePosition","timer","newObstacleFlag","setNewObstacleFlag","firstRender","useRef","shouldHandleControls","shouldHandleUI","didCrash","current","obstacleTimespan","togglePaused","handleTap","useEventListener","setTimeout","e","stopPropagation","loadImage","src","Promise","resolve","reject","Image","onload","onerror","preloadAssets","onFinishLoad","a","all","App","hasGameStarted","setGameStarted","isLoading","setLoading","exitBeforeEnter","initial","opacity","animate","exit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83f048ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RetroGaming.4c19fc87.ttf\";","module.exports = __webpack_public_path__ + \"static/media/RetroGaming.447cad17.woff\";","module.exports = __webpack_public_path__ + \"static/media/RetroGaming.0b863896.woff2\";","import { createGlobalStyle } from 'styled-components';\nimport RetroGamingTtf from './fonts/RetroGaming.ttf';\nimport RetroGamingWoff from './fonts/RetroGaming.woff';\nimport RetroGamingWoff2 from './fonts/RetroGaming.woff2';\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: \"Retro Gaming\";\n    src: url(${RetroGamingTtf}) format(\"truetype\"),\n         url(${RetroGamingWoff}) format(\"woff\"),\n         url(${RetroGamingWoff2}) format(\"woff2\");\n  }\n\n  body {\n    padding: 0;\n    margin: 0;\n    font-family: Retro Gaming;\n    font-size: calc(1em + 1vw);\n  }\n\n  button {\n    font-family: Retro Gaming;\n    font-size: inherit;\n  }\n\n  input {\n    font-family: Retro Gaming;\n    font-size: inherit;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.h4`\n  text-align: center;\n  color: rgb(59, 134, 255);\n`;\n\ninterface Props {\n  text: string;\n}\n\nconst TitleHeader = ({ text }: Props) => {\n  return <Title>{text}</Title>;\n};\n\nexport default TitleHeader;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  border: none;\n  padding: 5px;\n  text-align: center;\n  height: 5%;\n  background-color: lightGray;\n  transition: background-color 250ms ease, color 250ms ease;\n  color: #fff;\n\n  &:focus {\n    outline: none;\n    background-color: whiteSmoke;\n    color: #000;\n  }\n`;\n\ninterface Props {\n  setValue: Function;\n  onKeyDown?: (event: React.KeyboardEvent) => void;\n}\nconst TitleInput = ({ setValue, onKeyDown }: Props) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(event.target.value);\n\n  return (\n    <Input\n      data-testid=\"TitleInput\"\n      onChange={handleChange}\n      onKeyDown={onKeyDown}\n    />\n  );\n};\n\nexport default TitleInput;\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface StyledProps {\n  isVisible: boolean;\n}\nconst Button = styled.button`\n  opacity: ${(props: StyledProps) => (props.isVisible ? '1' : '0')};\n  transition: opacity 250ms ease;\n  margin-top: 20px;\n  padding: 10px;\n  border: none;\n  background-color: rgb(59, 134, 255);\n  color: white;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:active {\n    transform: translateY(2px);\n  }\n\n  &:hover {\n    opacity: ${(props: StyledProps) => (props.isVisible ? '0.8' : '0')};\n  }\n`;\n\ninterface Props {\n  isVisible: boolean;\n  label: string;\n  onClick: (event: React.MouseEvent) => void;\n}\nconst TitleButton = ({ isVisible, label, onClick }: Props) => {\n  return (\n    <Button isVisible={isVisible} disabled={!isVisible} onClick={onClick}>\n      {label}\n    </Button>\n  );\n};\n\nexport default TitleButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport TitleHeader from '../components/TitleHeader';\nimport TitleInput from '../components/TitleInput';\nimport TitleButton from '../components/TitleButton';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface StyledErrorTextProps {\n  isVisible: boolean;\n}\nconst ErrorText = styled.h1`\n  visibility: ${(props: StyledErrorTextProps) =>\n    props.isVisible ? 'visible' : 'hidden'};\n  color: red;\n  font-size: 18px;\n`;\n\ninterface Props {\n  name: string;\n  setName: (name: string) => void;\n  handleStart: (event: React.MouseEvent | React.KeyboardEvent) => void;\n  errorMsg?: string;\n}\nconst StartScreen = ({ name, setName, handleStart, errorMsg }: Props) => {\n  return (\n    <Container>\n      <TitleHeader text=\"Insira seu nome(min. 3 caracteres)\" />\n      <TitleInput\n        setValue={setName}\n        onKeyDown={(event: React.KeyboardEvent) => {\n          if (event.key === 'Enter' && name.length >= 3) {\n            handleStart(event);\n          }\n        }}\n      />\n      <ErrorText\n        isVisible={\n          errorMsg !== null && errorMsg !== undefined && errorMsg.length !== 0\n        }\n      >\n        {errorMsg}\n      </ErrorText>\n      <TitleButton\n        label=\"Iniciar corrida\"\n        isVisible={name.length >= 3}\n        onClick={handleStart}\n      />\n    </Container>\n  );\n};\n\nexport default StartScreen;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport car from '../assets/car.png';\n\nexport enum Position {\n  Left,\n  Middle,\n  Right,\n}\n\ninterface StyledProps {\n  x: string;\n}\nconst StyledCar = styled.img`\n  content: url(${car});\n  position: relative;\n  margin-left: 5%;\n  width: 20%;\n  height: 20%;\n  top: 80%;\n  left: ${(props: StyledProps) => props.x};\n  transition: left 100ms ease;\n`;\n\ninterface Props {\n  position: Position;\n}\nconst Car = ({ position }: Props) => {\n  const x = (() => {\n    switch (position) {\n      case Position.Left:\n        return '0%';\n      case Position.Middle:\n        return '33.3%';\n      case Position.Right:\n        return '66.6%';\n    }\n  })();\n\n  return <StyledCar x={x} />;\n};\n\nexport default Car;\n","import styled from 'styled-components';\n\nconst CenteredText = styled.h1`\n  position: absolute;\n  text-align: center;\n  top: 50%;\n  left: 50%;\n  margin-left: -1%;\n  transform: translate(-50%, -50%);\n  color: red;\n`;\n\nexport default CenteredText;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport CenteredText from '../components/CenteredText';\n\nconst Background = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: inherit;\n  height: inherit;\n  background-color: rgba(0, 0, 0, 0.4);\n  z-index: 2;\n`;\n\nconst StaticCenteredText = styled(CenteredText)`\n  position: static;\n  top: 0;\n  left: 0;\n  transform: translate(0, 0);\n`;\n\ninterface Props {\n  text: string;\n  children?: React.ReactNode;\n}\nconst Overlay = ({ text, children }: Props) => {\n  return (\n    <Background>\n      <StaticCenteredText>{text}</StaticCenteredText>\n      {children}\n    </Background>\n  );\n};\n\nexport default Overlay;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nimport { Position } from '../components/Car';\nimport obstacle from '../assets/obstacle.png';\n\ninterface StyledProps {\n  initialX: number;\n  finalX: number;\n  isPaused: boolean;\n  time: number;\n}\n\nconst obstacleMovement = (props: StyledProps) => keyframes`\n  100% {\n    top: 80%;\n    transform: scale(1, 1);\n    left: ${`${props.finalX}%`};\n  }\n`;\n\nconst StyledObstacle = styled.img`\n  content: url(${obstacle});\n  position: absolute;\n  margin-left: 5%;\n  width: 20%;\n  height: 20%;\n  top: 40%;\n  transform: scale(0.15, 0.15);\n  left: ${(props: StyledProps) => props.initialX}%;\n  animation: ${obstacleMovement} ${(props: StyledProps) => props.time}ms linear;\n  animation-play-state: ${(props: StyledProps) =>\n    props.isPaused ? 'paused' : 'running'};\n`;\n\ninterface Props {\n  position: Position;\n  time: number;\n  isPaused: boolean;\n}\nconst Obstacle = ({ position, time, isPaused }: Props) => {\n  const initialX = (() => {\n    switch (position) {\n      case Position.Left:\n        return 30;\n      case Position.Middle:\n        return 33;\n      case Position.Right:\n        return 35;\n    }\n  })();\n\n  const finalX = (() => {\n    switch (position) {\n      case Position.Left:\n        return 0;\n      case Position.Middle:\n        return 33.3;\n      case Position.Right:\n        return 66.6;\n    }\n  })();\n\n  return (\n    <StyledObstacle\n      initialX={initialX}\n      finalX={finalX}\n      time={time}\n      isPaused={isPaused}\n    />\n  );\n};\n\nexport default Obstacle;\n","import { useState, useEffect } from 'react';\n\ninterface Timer {\n  time: number;\n  pause: Function;\n  resume: Function;\n  reset: Function;\n}\n\nconst useTimer = (): Timer => {\n  const [time, setTime] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  useEffect(() => {\n    if (!paused) {\n      const interval = setInterval(() => {\n        setTime(prev => prev + 100);\n      }, 100);\n      return () => clearInterval(interval);\n    }\n  }, [time, paused]);\n\n  return {\n    time: time,\n    pause: () => setPaused(true),\n    resume: () => setPaused(false),\n    reset: () => setTime(0),\n  };\n};\n\nexport default useTimer;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport useEventListener from '@use-it/event-listener';\n\nimport background from '../assets/background.gif';\nimport pausedBackground from '../assets/background-paused.png';\nimport Car, { Position } from '../components/Car';\nimport CenteredText from '../components/CenteredText';\nimport Overlay from '../components/Overlay';\nimport Obstacle from '../components/Obstacle';\nimport TitleButton from '../components/TitleButton';\n\nimport useTimer from '../helpers/useTimer';\n\ninterface BackgroundProps {\n  frozenBackground: boolean;\n}\nconst Background = styled.div`\n  display: flex;\n  background-image: url(${(props: BackgroundProps) =>\n    props.frozenBackground ? pausedBackground : background});\n  background-size: 100% 100%;\n  width: 100vh;\n  height: 100vh;\n\n  @media (max-width: 768px) {\n    width: 100vw;\n  }\n`;\n\nconst TapAreaWrapper = styled.div`\n  position: absolute;\n  width: inherit;\n  height: inherit;\n  display: flex;\n`;\n\nconst TapAreaRecognizer = styled.div`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-end;\n`;\n\nconst PauseButton = styled.button`\n  color: red;\n  margin: 20px 20px 0 0;\n  background-color: transparent;\n  border: none;\n  font-size: 3rem;\n  z-index: 2;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:active {\n    transform: translateY(2px);\n  }\n`;\n\nconst getRandomPosition = (): Position => Math.floor((Math.random() * 100) % 3);\n\nconst GameScreen = () => {\n  const [currentPosition, setCurrentPosition] = useState(Position.Middle);\n  const [countdownValue, setCountdownValue] = useState(3);\n  const [isPaused, setPaused] = useState(false);\n  const [hasCrashed, setCrashed] = useState(false);\n  const [currentObstaclePosition, setCurrentObstaclePosition] = useState(\n    getRandomPosition,\n  );\n  const timer = useTimer();\n  const [newObstacleFlag, setNewObstacleFlag] = useState(true);\n  const firstRender = useRef(true);\n\n  const shouldHandleControls =\n    countdownValue === -1 && !isPaused && !hasCrashed;\n  const shouldHandleUI = countdownValue === -1 && !hasCrashed;\n  const obstacleTimespan = 750;\n  const didCrash =\n    countdownValue === -1 &&\n    !firstRender.current &&\n    timer.time >= obstacleTimespan - 200 &&\n    currentPosition === currentObstaclePosition;\n\n  const togglePaused = () => {\n    if (shouldHandleUI) {\n      isPaused ? timer.resume() : timer.pause();\n      setPaused(prev => !prev);\n    }\n  };\n\n  const moveLeft = () => {\n    if (currentPosition !== Position.Left) {\n      setCurrentPosition(prev => prev - 1);\n    }\n  };\n\n  const moveRight = () => {\n    if (currentPosition !== Position.Right) {\n      setCurrentPosition(prev => prev + 1);\n    }\n  };\n\n  const handleTap = (position: Position) => {\n    return () => {\n      if (shouldHandleControls) {\n        setCurrentPosition(position);\n      }\n    };\n  };\n\n  const reset = () => {\n    setCrashed(false);\n    setCurrentPosition(Position.Middle);\n    timer.reset();\n    setCountdownValue(3);\n    firstRender.current = true;\n    timer.resume();\n  };\n\n  const handleKeyboard = (event: React.KeyboardEvent): void => {\n    if (shouldHandleControls) {\n      switch (event.key) {\n        case 'A':\n        case 'a': {\n          setCurrentPosition(Position.Left);\n          break;\n        }\n        case 'S':\n        case 's': {\n          setCurrentPosition(Position.Middle);\n          break;\n        }\n        case 'D':\n        case 'd': {\n          setCurrentPosition(Position.Right);\n          break;\n        }\n        case 'ArrowLeft': {\n          moveLeft();\n          break;\n        }\n        case 'ArrowRight': {\n          moveRight();\n          break;\n        }\n      }\n    }\n\n    if (shouldHandleUI) {\n      switch (event.key) {\n        case 'Escape': {\n          togglePaused();\n          break;\n        }\n      }\n    }\n  };\n\n  useEventListener('keydown', handleKeyboard);\n  useEffect(() => {\n    if (countdownValue >= 0) {\n      setTimeout(() => setCountdownValue(prev => prev - 1), 1000);\n    }\n  }, [countdownValue]);\n\n  useEffect(() => {\n    if (didCrash) {\n      setCrashed(true);\n      timer.pause();\n    }\n  }, [didCrash, timer]);\n\n  useEffect(() => {\n    if (countdownValue === -1 && timer.time >= obstacleTimespan) {\n      if (firstRender.current) firstRender.current = false;\n      setCurrentObstaclePosition(getRandomPosition());\n      setNewObstacleFlag(!newObstacleFlag);\n      timer.reset();\n    }\n  }, [\n    timer,\n    countdownValue,\n    newObstacleFlag,\n    currentObstaclePosition,\n    currentPosition,\n  ]);\n\n  return (\n    <>\n      <Background frozenBackground={isPaused || hasCrashed}>\n        {countdownValue >= 0 && <CenteredText>{countdownValue}</CenteredText>}\n        {isPaused && <Overlay text=\"Paused\" />}\n        {hasCrashed && (\n          <Overlay text=\"Game Over\">\n            <TitleButton isVisible label=\"Tentar novamente\" onClick={reset} />\n          </Overlay>\n        )}\n        <TapAreaWrapper>\n          {countdownValue === -1 && (\n            <Obstacle\n              position={currentObstaclePosition}\n              time={obstacleTimespan}\n              key={`${newObstacleFlag}`}\n              isPaused={isPaused || hasCrashed}\n            />\n          )}\n          <TapAreaRecognizer onClick={handleTap(Position.Left)} />\n          <TapAreaRecognizer onClick={handleTap(Position.Middle)} />\n          <TapAreaRecognizer onClick={handleTap(Position.Right)}>\n            <PauseButton\n              onClick={e => {\n                e.stopPropagation();\n                togglePaused();\n              }}\n            >\n              ||\n            </PauseButton>\n          </TapAreaRecognizer>\n        </TapAreaWrapper>\n        <Car position={currentPosition} />\n      </Background>\n    </>\n  );\n};\n\nexport default GameScreen;\n","import car from '../assets/car.png';\nimport obstacle from '../assets/obstacle.png';\nimport background from '../assets/background.gif';\nimport pausedBackground from '../assets/background-paused.png';\n\nconst loadImage = (src: string) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = resolve;\n    img.onerror = reject;\n    img.src = src;\n  });\n};\n\nconst preloadAssets = async (onFinishLoad: Function) => {\n  await Promise.all([\n    loadImage(car),\n    loadImage(obstacle),\n    loadImage(background),\n    loadImage(pausedBackground),\n  ]);\n  onFinishLoad();\n};\n\nexport default preloadAssets;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport GlobalStyle from './globalStyle';\nimport StartScreen from './pages/StartScreen';\nimport GameScreen from './pages/GameScreen';\nimport preloadAssets from './helpers/preloadAssets';\n\nconst Container = styled.div`\n  height: 100vh;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-content: center;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst App = () => {\n  const [name, setName] = useState('');\n  const [hasGameStarted, setGameStarted] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const handleStartGameClick = () => setGameStarted(!hasGameStarted);\n\n  useEffect(() => {\n    setLoading(true);\n    preloadAssets(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        {isLoading ? (\n          <h1>Loading...</h1>\n        ) : (\n          <AnimatePresence exitBeforeEnter>\n            <motion.div\n              key={hasGameStarted ? 'gameScreen' : 'startScreen'}\n              initial={{ x: 600, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: -600, opacity: 0 }}\n            >\n              {hasGameStarted ? (\n                <GameScreen />\n              ) : (\n                <StartScreen\n                  name={name}\n                  setName={setName}\n                  handleStart={handleStartGameClick}\n                />\n              )}\n            </motion.div>\n          </AnimatePresence>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/background.d0d2cd17.gif\";","module.exports = __webpack_public_path__ + \"static/media/background-paused.8f82fbfc.png\";","module.exports = __webpack_public_path__ + \"static/media/car.56be0a4e.png\";","module.exports = __webpack_public_path__ + \"static/media/obstacle.45695e49.png\";"],"sourceRoot":""}